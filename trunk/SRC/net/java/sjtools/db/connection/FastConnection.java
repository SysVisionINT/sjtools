/*
 * SJTools - SysVision Java Tools
 * 
 * Copyright (C) 2006 SysVision - Consultadoria e Desenvolvimento em Sistemas de Informática, Lda.  
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA
 */
package net.java.sjtools.db.connection;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;

import net.java.sjtools.thread.Lock;

public class FastConnection extends ConnectionWrapper {
	private Map fastMap = null;
	private Lock lock = null;

	public FastConnection(Connection con) {
		super(con);
		
		fastMap = new HashMap(100);
		lock = new Lock(fastMap);
	}

	public void closeConnection() {
		try {
			super.close();
		} catch (SQLException e) {
		}
		
		lock.getWriteLock();
		fastMap.clear();
		lock.releaseLock();
	}

	public void close() throws SQLException {
	}

	public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
		Integer psID = new Integer(sql.hashCode());
		
		PreparedStatement preparedStatement = getPreparedStatement(psID);
		
		if (preparedStatement == null) {
			preparedStatement = super.prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
			
			savePreparedStatement(psID, preparedStatement);
		}
		
		return preparedStatement;
	}

	public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
		Integer psID = new Integer(sql.hashCode());
		
		PreparedStatement preparedStatement = getPreparedStatement(psID);
		
		if (preparedStatement == null) {
			preparedStatement = super.prepareStatement(sql, resultSetType, resultSetConcurrency);
			
			savePreparedStatement(psID, preparedStatement);
		}
		
		return preparedStatement;
	}

	public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
		Integer psID = new Integer(sql.hashCode());
		
		PreparedStatement preparedStatement = getPreparedStatement(psID);
		
		if (preparedStatement == null) {
			preparedStatement = super.prepareStatement(sql, autoGeneratedKeys);
			
			savePreparedStatement(psID, preparedStatement);
		}
		
		return preparedStatement;
	}

	public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
		Integer psID = new Integer(sql.hashCode());
		
		PreparedStatement preparedStatement = getPreparedStatement(psID);
		
		if (preparedStatement == null) {
			preparedStatement = super.prepareStatement(sql, columnIndexes);
			
			savePreparedStatement(psID, preparedStatement);
		}
		
		return preparedStatement;
	}

	public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
		Integer psID = new Integer(sql.hashCode());
		
		PreparedStatement preparedStatement = getPreparedStatement(psID);
		
		if (preparedStatement == null) {
			preparedStatement = super.prepareStatement(sql, columnNames);
			
			savePreparedStatement(psID, preparedStatement);
		}
		
		return preparedStatement;
	}

	public PreparedStatement prepareStatement(String sql) throws SQLException {
		Integer psID = new Integer(sql.hashCode());
		
		PreparedStatement preparedStatement = getPreparedStatement(psID);
		
		if (preparedStatement == null) {
			preparedStatement = super.prepareStatement(sql);
			
			savePreparedStatement(psID, preparedStatement);
		}
		
		return preparedStatement;
	}
	
	private PreparedStatement getPreparedStatement(Integer psID) {
		lock.getReadLock();
		PreparedStatement preparedStatement = (PreparedStatement) fastMap.get(psID);
		lock.releaseLock();
		
		return preparedStatement;
	}
	
	private void savePreparedStatement(Integer psID, PreparedStatement preparedStatement) {
		lock.getWriteLock();
		fastMap.put(psID, preparedStatement);
		lock.releaseLock();
	}	
}
